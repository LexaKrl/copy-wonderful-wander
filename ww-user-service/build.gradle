import org.testcontainers.containers.PostgreSQLContainer

buildscript {
    dependencies {
        classpath "org.testcontainers:postgresql:$testcontainersVersion"
    }
}

plugins {
    id 'nu.studer.jooq' version "$jooqPluginVersion"
    id 'org.liquibase.gradle' version "$liquibasePluginVersion"
}

jar.enabled = false

ext['jooq.version'] = jooq.version.get()

final PostgreSQLContainer postgres = new PostgreSQLContainer("postgres:15-alpine")
        .withDatabaseName(System.getenv("TESTCONTAINERS_DB") ?: "${dbName}")
        .withUsername(System.getenv("TESTCONTAINERS_USERNAME") ?: "${dbUsername}")
        .withPassword(System.getenv("TESTCONTAINERS_PASSWORD") ?: "${dbPassword}")
        .withEnv("TESTCONTAINERS_RYUK_DISABLED", "true")
        .withEnv("default_schema", "public")

postgres.start()

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    implementation 'org.jooq:jooq-codegen'
    jooqGenerator "org.jooq:jooq-meta-extensions-liquibase:$jooqMetaExtensionsLiquibase"

    runtimeOnly 'org.postgresql:postgresql'
    jooqGenerator 'org.postgresql:postgresql'

    implementation 'org.liquibase:liquibase-core'
    liquibaseRuntime 'org.liquibase:liquibase-core'
    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime "org.liquibase:liquibase-groovy-dsl:$liquibaseDslGroovyVersion"
    liquibaseRuntime "info.picocli:picocli:$picocliVersion"

    implementation project(':ww-core')
    implementation project(':ww-api')
    implementation project(':ww-db')

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
}

jooq {
    configurations {
        main {
            generateSchemaSourceOnCompilation = true

            generationTool {
                logging = 'WARN'
                jdbc {
                    driver = "org.postgresql.Driver"
                    url = postgres.jdbcUrl
                    user = postgres.username
                    password = postgres.password
                }

                generator {
                    name = "org.jooq.codegen.DefaultGenerator"

                    database {
                        name = "org.jooq.meta.postgres.PostgresDatabase"
                        inputSchema = "public"
                        excludes = "databasechangelog|databasechangeloglock"
                        outputSchema = "public"
                    }

                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                        javaTimeTypes = true
                    }

                    target {
                        packageName = "com.technokratos"
                        directory = "build/generated-src/jooq/main"
                    }

                    strategy {
                        name = "org.jooq.codegen.DefaultGeneratorStrategy"
                    }
                }
            }
        }
    }
}

liquibase {
    activities {
        main {
            arguments = [
                    logLevel     : "info",
                    changelogFile: "ww-db/src/main/resources/db/changelog/user-service/changelog-master-jooq.xml",
                    url          : postgres.jdbcUrl,
                    username     : postgres.username,
                    password     : postgres.password,
                    driver       : "org.postgresql.Driver"
            ]
        }
    }
    runList = "main"
}

sourceSets {
    test {
        resources {
            srcDirs += [
                    project(":ww-db").sourceSets.main.resources
            ]
        }
    }
}

tasks.named("generateJooq") {
    dependsOn "update"
}

tasks.register('containerStop') {
    doLast {
        if (postgres.isRunning()) {
            postgres.stop()
            println 'STOPPING DATABASE CONTAINER'
        }
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    taskGraph.allTasks.last().doLast {
        tasks.named('containerStop').get().actions.each { action ->
            action.execute(tasks.named('containerStop').get())
        }
    }
}

test {
    useJUnitPlatform()
}