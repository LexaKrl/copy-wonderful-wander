services:
  portainer:
    image: portainer/portainer-ce
    environment:
      - TZ=Europe/Moscow
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    ports:
      - "8000:9000"

  kafka-1:
    image: bitnami/kafka
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=wonderful-wander
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9090
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - kafka-storage-1:/bitnami/kafka
    networks:
      - ww-network

  kafka-2:
    image: bitnami/kafka
    environment:
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_KRAFT_CLUSTER_ID=wonderful-wander
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9090
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - kafka-storage-2:/bitnami/kafka
    networks:
      - ww-network

  minio:
    image: minio/minio:latest
    command: server --console-address ":9001" /data/
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - env/.user-service.env
    volumes:
      - minio-storage:/data
    networks:
      - ww-network

  consul:
    image: consul:1.15.4
    hostname: localhost
    ports:
      - "8500:8500"
    networks:
      - ww-network

  postgres-user-service:
    image: postgres:15-alpine
    env_file:
      - env/.user-service.env
    volumes:
      - postgres-user-service:/var/lib/postgresql/data
    networks:
      - ww-network

  postgres-photo-management-service:
    image: postgres:15-alpine
    env_file:
      - env/.photo-management-service.env
    volumes:
      - postgres-photo-management-service:/var/lib/postgresql/data
    networks:
      - ww-network

  backend-api-gateway:
    container_name: api-gateway
    image: registry.gitlab.com/wonderful-wander-team/wonderful-wander/ww-api-gateway
    env_file:
      - env/.api-gateway.env
    ports:
      - "8080:8080"
    depends_on:
      - consul
    networks:
      - ww-network

  backend-user-service:
    container_name: user-service
    image: registry.gitlab.com/wonderful-wander-team/wonderful-wander/ww-user-service
    env_file:
      - env/.user-service.env
    depends_on:
      - kafka-1
      - kafka-2
      - consul
      - minio
      - postgres-user-service
    networks:
      - ww-network

  backend-photo-management-service:
    container_name: photo-management-service
    image: registry.gitlab.com/wonderful-wander-team/wonderful-wander/ww-photo-management-service
    env_file:
      - env/.photo-management-service.env
    depends_on:
      - kafka-1
      - kafka-2
      - consul
      - minio
      - postgres-photo-management-service
    networks:
      - ww-network

  nginx:
    image: nginx
    restart: unless-stopped
    environment:
      - TZ=Europe/Moscow
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ~/nginx/conf.d/nginx.conf:/etc/nginx/nginx.conf:ro
      - ~/nginx/cert.pem:/etc/cert.pem
      - ~/nginx/key.pem:/etc/key.pem
      - ~/nginx/www/html:/usr/share/nginx/html
    networks:
      - ww-network

volumes:
  kafka-storage-1:
  kafka-storage-2:
  minio-storage:
  postgres-user-service:
  postgres-photo-management-service:
  portainer-data:

networks:
  ww-network:
    driver: bridge